# Makefile for mathlib
# Generated by C/C++ Code Generator

# Project configuration
PROJECT = mathlib
VERSION = 1.0.0

# Compiler settings
CC = gcc
CFLAGS = -std=c99 -Wall -Wextra -Wpedantic

# Build type flags
ifdef DEBUG
    CFLAGS += -g -O0 -DDEBUG
else
    CFLAGS += -O3 -DNDEBUG
endif

# Directories
SRCDIR = src
INCDIR = include
OBJDIR = obj
LIBDIR = lib
TESTDIR = tests
BINDIR = bin

# Create directories if they don't exist
$(shell mkdir -p $(OBJDIR) $(LIBDIR) $(BINDIR))

# Source and object files
SOURCES = $(wildcard $(SRCDIR)/*.c)
OBJECTS = $(SOURCES:$(SRCDIR)/%.c=$(OBJDIR)/%.o)
HEADERS = $(wildcard $(INCDIR)/$(PROJECT)/*.h)

# Library names
STATIC_LIB = $(LIBDIR)/lib$(PROJECT).a
SHARED_LIB = $(LIBDIR)/lib$(PROJECT).so

# Include flags
INCLUDES = -I$(INCDIR)

# Linker flags
LDFLAGS = -L$(LIBDIR)
LIBS = -l$(PROJECT)

# Dependencies
LIBS += -lm

# Default target
all: static shared

# Static library
static: $(STATIC_LIB)

$(STATIC_LIB): $(OBJECTS)
	ar rcs $@ $^

# Shared library
shared: $(SHARED_LIB)

$(SHARED_LIB): $(OBJECTS)
	$(CC) -shared -o $@ $^ $(LIBS)

# Object files
$(OBJDIR)/%.o: $(SRCDIR)/%.c $(HEADERS)
	$(CC) $(CFLAGS) $(INCLUDES) -fPIC -c $< -o $@

# Tests
TEST_SOURCES = $(wildcard $(TESTDIR)/*.c)
TEST_OBJECTS = $(TEST_SOURCES:$(TESTDIR)/%.c=$(OBJDIR)/test_%.o)
TEST_BINARIES = $(TEST_SOURCES:$(TESTDIR)/%.c=$(BINDIR)/%)

tests: $(TEST_BINARIES)

$(BINDIR)/%: $(OBJDIR)/test_%.o $(STATIC_LIB)
	$(CC) $(CFLAGS) $< -o $@ $(LDFLAGS) $(LIBS)

$(OBJDIR)/test_%.o: $(TESTDIR)/%.c $(HEADERS)
	$(CC) $(CFLAGS) $(INCLUDES) -I$(TESTDIR) -c $< -o $@

# Run tests
check: tests
	@for test in $(TEST_BINARIES); do \
		echo "Running $$test..."; \
		$$test || exit 1; \
	done
	@echo "All tests passed!"

# Installation
PREFIX ?= /usr/local
INSTALL_LIBDIR = $(PREFIX)/lib
INSTALL_INCDIR = $(PREFIX)/include

install: static shared
	mkdir -p $(INSTALL_LIBDIR) $(INSTALL_INCDIR)
	cp $(STATIC_LIB) $(SHARED_LIB) $(INSTALL_LIBDIR)/
	cp -r $(INCDIR)/$(PROJECT) $(INSTALL_INCDIR)/
	ldconfig

uninstall:
	rm -f $(INSTALL_LIBDIR)/lib$(PROJECT).*
	rm -rf $(INSTALL_INCDIR)/$(PROJECT)
	ldconfig

# Cleaning
clean:
	rm -rf $(OBJDIR) $(LIBDIR) $(BINDIR)

distclean: clean
	rm -rf build/ dist/

# Help
help:
	@echo "Available targets:"
	@echo "  all        - Build static and shared libraries (default)"
	@echo "  static     - Build static library"
	@echo "  shared     - Build shared library"
	@echo "  tests      - Build test executables"
	@echo "  check      - Build and run tests"
	@echo "  install    - Install libraries and headers"
	@echo "  uninstall  - Remove installed files"
	@echo "  clean      - Remove build artifacts"
	@echo "  distclean  - Remove all generated files"
	@echo ""
	@echo "Variables:"
	@echo "  DEBUG=1    - Build with debug symbols"
	@echo "  PREFIX     - Installation prefix (default: /usr/local)"

# Phony targets
.PHONY: all static shared tests check install uninstall clean distclean help

# Show configuration
info:
	@echo "Project: $(PROJECT) v$(VERSION)"
	@echo "Language: C"
	@echo "Standard: C99"
	@echo "Compiler: $(CC)"
	@echo "CFLAGS: $(CFLAGS)"
	@echo "Sources: $(words $(SOURCES)) files"
	@echo "Headers: $(words $(HEADERS)) files"