/**
 * @file test_{{ module.name }}.c
 * @brief Unit tests for {{ module.name }} module using Unity framework
 * @author {{ config.author or 'Generated by C/C++ Code Generator' }}
 * @version {{ config.version }}
 * @date {{ config.generated_at[:10] }}
 */

#include "unity.h"
#include "{{ module.name }}.h"

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

/* ========================================================================== */
/* Test Setup and Teardown                                                   */
/* ========================================================================== */

void setUp(void)
{
    /* This function is called before each test */
    {{ module.name }}_error_t result = {{ module.name }}_init();
    TEST_ASSERT_EQUAL({{ module.name | upper }}_SUCCESS, result);
}

void tearDown(void)
{
    /* This function is called after each test */
    {{ module.name }}_error_t result = {{ module.name }}_cleanup();
    TEST_ASSERT_EQUAL({{ module.name | upper }}_SUCCESS, result);
}

/* ========================================================================== */
/* Basic Functionality Tests                                                 */
/* ========================================================================== */

void test_{{ module.name }}_init_success(void)
{
    /* Test that initialization succeeds */
    {{ module.name }}_error_t result = {{ module.name }}_cleanup(); // Clean up from setUp
    TEST_ASSERT_EQUAL({{ module.name | upper }}_SUCCESS, result);
    
    result = {{ module.name }}_init();
    TEST_ASSERT_EQUAL({{ module.name | upper }}_SUCCESS, result);
}

void test_{{ module.name }}_init_multiple_calls(void)
{
    /* Test that multiple init calls are handled correctly */
    {{ module.name }}_error_t result1 = {{ module.name }}_init();
    {{ module.name }}_error_t result2 = {{ module.name }}_init();
    
    TEST_ASSERT_EQUAL({{ module.name | upper }}_SUCCESS, result1);
    TEST_ASSERT_EQUAL({{ module.name | upper }}_SUCCESS, result2);
    
    /* Cleanup extra references */
    {{ module.name }}_cleanup();
    {{ module.name }}_cleanup();
}

void test_{{ module.name }}_cleanup_success(void)
{
    /* Test that cleanup succeeds */
    {{ module.name }}_error_t result = {{ module.name }}_cleanup();
    TEST_ASSERT_EQUAL({{ module.name | upper }}_SUCCESS, result);
    
    /* Re-initialize for tearDown */
    result = {{ module.name }}_init();
    TEST_ASSERT_EQUAL({{ module.name | upper }}_SUCCESS, result);
}

void test_{{ module.name }}_error_string(void)
{
    /* Test error string conversion */
    const char* success_str = {{ module.name }}_error_string({{ module.name | upper }}_SUCCESS);
    const char* null_str = {{ module.name }}_error_string({{ module.name | upper }}_ERROR_NULL_PTR);
    const char* invalid_str = {{ module.name }}_error_string({{ module.name | upper }}_ERROR_INVALID);
    
    TEST_ASSERT_NOT_NULL(success_str);
    TEST_ASSERT_NOT_NULL(null_str);
    TEST_ASSERT_NOT_NULL(invalid_str);
    
    TEST_ASSERT_TRUE(strlen(success_str) > 0);
    TEST_ASSERT_TRUE(strlen(null_str) > 0);
    TEST_ASSERT_TRUE(strlen(invalid_str) > 0);
}

void test_{{ module.name }}_error_string_invalid_code(void)
{
    /* Test error string with invalid error code */
    const char* invalid_str = {{ module.name }}_error_string(-1);
    TEST_ASSERT_NOT_NULL(invalid_str);
    TEST_ASSERT_TRUE(strlen(invalid_str) > 0);
}

/* ========================================================================== */
/* Function-Specific Tests                                                   */
/* ========================================================================== */

{% if module.functions %}
{% for func in module.functions %}
void test_{{ module.name }}_{{ func.name }}_basic(void)
{
    /* Test basic functionality of {{ func.name }} */
    {% if func.parameters %}
    /* TODO: Initialize test parameters */
    {% for param in func.parameters %}
    {% if param.type == 'int' %}
    {{ param.type }} {{ param.name }} = 0;
    {% elif param.type == 'char*' or param.type == 'const char*' %}
    {{ param.type }} {{ param.name }} = "test";
    {% elif param.is_pointer %}
    {{ param.type.replace('*', '').strip() }} {{ param.name }}_value = 0;
    {{ param.type }} {{ param.name }} = &{{ param.name }}_value;
    {% else %}
    {{ param.type }} {{ param.name }} = 0;
    {% endif %}
    {% endfor %}
    {% endif %}
    
    {% if func.return_type.endswith('_error_t') %}
    {{ func.return_type }} result = {{ func.name }}({% for param in func.parameters %}{{ param.name }}{% if not loop.last %}, {% endif %}{% endfor %});
    TEST_ASSERT_EQUAL({{ module.name | upper }}_SUCCESS, result);
    {% elif func.return_type == 'void' %}
    /* Function returns void, just call it */
    {{ func.name }}({% for param in func.parameters %}{{ param.name }}{% if not loop.last %}, {% endif %}{% endfor %});
    {% else %}
    {{ func.return_type }} result = {{ func.name }}({% for param in func.parameters %}{{ param.name }}{% if not loop.last %}, {% endif %}{% endfor %});
    /* TODO: Add appropriate assertions for return value */
    (void)result; /* Suppress unused variable warning */
    {% endif %}
}

{% if func.parameters %}
void test_{{ module.name }}_{{ func.name }}_null_parameters(void)
{
    /* Test {{ func.name }} with null parameters */
    {% for param in func.parameters %}
    {% if param.is_pointer %}
    {% if func.return_type.endswith('_error_t') %}
    {{ func.return_type }} result = {{ func.name }}({% for p in func.parameters %}{% if p.name == param.name %}NULL{% else %}{% if p.type == 'int' %}0{% elif p.type == 'char*' or p.type == 'const char*' %}"test"{% else %}0{% endif %}{% endif %}{% if not loop.last %}, {% endif %}{% endfor %});
    TEST_ASSERT_EQUAL({{ module.name | upper }}_ERROR_NULL_PTR, result);
    {% else %}
    /* Function doesn't return error code, skip null parameter test */
    {% endif %}
    {% endif %}
    {% endfor %}
}
{% endif %}

{% endfor %}
{% endif %}

/* ========================================================================== */
/* Edge Case Tests                                                           */
/* ========================================================================== */

void test_{{ module.name }}_double_cleanup(void)
{
    /* Test that double cleanup is handled gracefully */
    {{ module.name }}_error_t result1 = {{ module.name }}_cleanup();
    {{ module.name }}_error_t result2 = {{ module.name }}_cleanup();
    
    TEST_ASSERT_EQUAL({{ module.name | upper }}_SUCCESS, result1);
    /* Second cleanup might return error or success depending on implementation */
    
    /* Re-initialize for tearDown */
    {{ module.name }}_error_t init_result = {{ module.name }}_init();
    TEST_ASSERT_EQUAL({{ module.name | upper }}_SUCCESS, init_result);
}

/* ========================================================================== */
/* Performance Tests                                                         */
/* ========================================================================== */

void test_{{ module.name }}_performance_init_cleanup(void)
{
    /* Test performance of multiple init/cleanup cycles */
    const int cycles = 1000;
    
    for (int i = 0; i < cycles; i++) {
        {{ module.name }}_error_t init_result = {{ module.name }}_init();
        TEST_ASSERT_EQUAL({{ module.name | upper }}_SUCCESS, init_result);
        
        {{ module.name }}_error_t cleanup_result = {{ module.name }}_cleanup();
        TEST_ASSERT_EQUAL({{ module.name | upper }}_SUCCESS, cleanup_result);
    }
    
    /* Re-initialize for tearDown */
    {{ module.name }}_error_t final_init = {{ module.name }}_init();
    TEST_ASSERT_EQUAL({{ module.name | upper }}_SUCCESS, final_init);
}

/* ========================================================================== */
/* Main Test Runner                                                          */
/* ========================================================================== */

int main(void)
{
    UNITY_BEGIN();
    
    /* Basic functionality tests */
    RUN_TEST(test_{{ module.name }}_init_success);
    RUN_TEST(test_{{ module.name }}_init_multiple_calls);
    RUN_TEST(test_{{ module.name }}_cleanup_success);
    RUN_TEST(test_{{ module.name }}_error_string);
    RUN_TEST(test_{{ module.name }}_error_string_invalid_code);
    
    /* Function-specific tests */
    {% if module.functions %}
    {% for func in module.functions %}
    RUN_TEST(test_{{ module.name }}_{{ func.name }}_basic);
    {% if func.parameters %}
    RUN_TEST(test_{{ module.name }}_{{ func.name }}_null_parameters);
    {% endif %}
    {% endfor %}
    {% endif %}
    
    /* Edge case tests */
    RUN_TEST(test_{{ module.name }}_double_cleanup);
    
    /* Performance tests */
    RUN_TEST(test_{{ module.name }}_performance_init_cleanup);
    
    return UNITY_END();
}
