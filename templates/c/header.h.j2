/**
 * @file {{ module.name }}.h
 * @brief {{ module.description or 'Module: ' + module.name }}
 * @author {{ config.author or 'Generated by C/C++ Code Generator' }}
 * @version {{ config.version }}
 * @date {{ config.generated_at[:10] if config.generated_at else '2025-06-19' }}
 * 
 * {{ config.description or 'Auto-generated C library module' }}
 * 
{% if config.license %}
 * @license {{ config.license }}
{% endif %}
 */

#ifndef {{ module.name | header_guard }}
#define {{ module.name | header_guard }}

#ifdef __cplusplus
extern "C" {
#endif

/* Standard library includes */
#include <stddef.h>
#include <stdint.h>
#include <stdbool.h>

{% if config.error_handling and config.error_handling.use_assert %}
#include <assert.h>
{% endif %}

/**
 * @defgroup {{ module.name }} {{ module.name | title }} Module
 * @brief {{ module.description or 'Module: ' + module.name }}
 * @{
 */

/* ========================================================================== */
/* Constants and Macros                                                       */
/* ========================================================================== */

{% if module.constants %}
{% for constant in module.constants %}
/**
 * @brief {{ constant.description or 'Constant: ' + constant.name }}
 */
#define {{ constant.name }} ({{ constant.value }})

{% endfor %}
{% endif %}

/* Error codes */
typedef enum {
    {{ module.name | upper }}_SUCCESS = 0,     /**< Operation successful */
    {{ module.name | upper }}_ERROR_NULL_PTR,  /**< Null pointer error */
    {{ module.name | upper }}_ERROR_INVALID,   /**< Invalid parameter */
    {{ module.name | upper }}_ERROR_MEMORY,    /**< Memory allocation error */
    {{ module.name | upper }}_ERROR_IO,        /**< I/O error */
    {{ module.name | upper }}_ERROR_UNKNOWN    /**< Unknown error */
} {{ module.name }}_error_t;

/* ========================================================================== */
/* Type Definitions                                                           */
/* ========================================================================== */

{% if module.enums %}
{% for enum in module.enums %}
/**
 * @brief {{ enum.description or 'Enumeration: ' + enum.name }}
 */
typedef enum {
{% for value in enum['values'] %}
    {{ enum.name | upper }}_{{ value.name | upper }}{% if value.value is defined %} = {{ value.value }}{% endif %},  /**< {{ value.description or value.name }} */
{% endfor %}
} {{ enum.name }}_t;

{% endfor %}
{% endif %}

{% if module.structures %}
{% for struct in module.structures %}
/**
 * @brief {{ struct.description or 'Structure: ' + struct.name }}
 */
typedef struct {{ struct.name }}_s {
{% for field in struct['fields'] %}
    {{ field.type }} {{ field.name }}{% if field.array_size %}[{{ field.array_size }}]{% endif %};  /**< {{ field.description or field.name }} */
{% endfor %}
} {% if struct.is_packed %}__attribute__((packed)) {% endif %}{{ struct.name }}_t;

{% endfor %}
{% endif %}

/* ========================================================================== */
/* Function Declarations                                                      */
/* ========================================================================== */

{% if module.functions %}
{% for func in module.functions %}
/**
 * @brief {{ func.description or 'Function: ' + func.name }}
 * 
{% for param in func['parameters'] %}
 * @param {{ param.name }} {{ param.description or param.name }}
{% endfor %}
 * @return {{ func.return_type }} {{ 'Error code or result' if func.return_type.endswith('_error_t') else 'Function result' }}
 * 
 * @note This function is {{ 'thread-safe' if 'thread_safe' in func else 'not guaranteed to be thread-safe' }}
 * 
 * Example usage:
 * @code
 * {{ func.return_type }} result = {{ func.name }}({% for param in func['parameters'] %}{{ param.name }}{% if not loop.last %}, {% endif %}{% endfor %});
 * if (result != {{ module.name | upper }}_SUCCESS) {
 *     // Handle error
 * }
 * @endcode
 */
{% if func.is_static %}static {% endif %}{% if func.is_inline %}inline {% endif %}{{ func.return_type }} {{ func.name }}(
{% if func['parameters'] %}
{% for param in func['parameters'] %}
    {% if param.is_const %}const {% endif %}{{ param.type }}{% if param.is_pointer %}*{% endif %}{% if param.is_array %}[]{% endif %} {{ param.name }}{% if param.default_value %} = {{ param.default_value }}{% endif %}{% if not loop.last %},{% endif %}
{% endfor %}
{% else %}
    void
{% endif %}
);

{% endfor %}
{% endif %}

/**
 * @brief Get error message string
 * @param error Error code
 * @return const char* Error message string
 */
const char* {{ module.name }}_error_string({{ module.name }}_error_t error);

/**
 * @brief Initialize {{ module.name }} module
 * @return {{ module.name }}_error_t Error code
 */
{{ module.name }}_error_t {{ module.name }}_init(void);

/**
 * @brief Cleanup {{ module.name }} module
 * @return {{ module.name }}_error_t Error code
 */
{{ module.name }}_error_t {{ module.name }}_cleanup(void);

/**
 * @}
 */

#ifdef __cplusplus
}
#endif

#endif /* {{ module.name | header_guard }} */
