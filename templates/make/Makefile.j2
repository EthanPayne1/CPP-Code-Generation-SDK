# Makefile for {{ config.name }}
# Generated by C/C++ Code Generator

# Project configuration
PROJECT = {{ config.name }}
VERSION = {{ config.version }}

# Compiler settings
{% if config.language.lower() == 'c' %}
CC = gcc
CFLAGS = -std=c{{ config.c_standard[1:] if config.c_standard else '99' }} -Wall -Wextra -Wpedantic
{% else %}
CXX = g++
CXXFLAGS = -std=c++{{ config.cpp_standard[3:] if config.cpp_standard else '17' }} -Wall -Wextra -Wpedantic
{% endif %}

# Build type flags
ifdef DEBUG
{% if config.language.lower() == 'c' %}
    CFLAGS += -g -O0 -DDEBUG
{% else %}
    CXXFLAGS += -g -O0 -DDEBUG
{% endif %}
else
{% if config.language.lower() == 'c' %}
    CFLAGS += -O3 -DNDEBUG
{% else %}
    CXXFLAGS += -O3 -DNDEBUG
{% endif %}
endif

# Directories
SRCDIR = src
INCDIR = include
OBJDIR = obj
LIBDIR = lib
TESTDIR = tests
BINDIR = bin

# Create directories if they don't exist
$(shell mkdir -p $(OBJDIR) $(LIBDIR) $(BINDIR))

# Source and object files
SOURCES = $(wildcard $(SRCDIR)/*.{% if config.language.lower() == 'c' %}c{% else %}cpp{% endif %})
OBJECTS = $(SOURCES:$(SRCDIR)/%.{% if config.language.lower() == 'c' %}c{% else %}cpp{% endif %}=$(OBJDIR)/%.o)
HEADERS = $(wildcard $(INCDIR)/$(PROJECT)/*.h)

# Library names
STATIC_LIB = $(LIBDIR)/lib$(PROJECT).a
SHARED_LIB = $(LIBDIR)/lib$(PROJECT).so

# Include flags
INCLUDES = -I$(INCDIR)

# Linker flags
LDFLAGS = -L$(LIBDIR)
LIBS = -l$(PROJECT)

{% if config.dependencies %}
# Dependencies
{% for dep in config.dependencies %}
{% if dep.name == 'm' %}
LIBS += -lm
{% elif dep.type == 'system' %}
LIBS += -l{{ dep.name }}
{% elif dep.type == 'pkg-config' %}
INCLUDES += $(shell pkg-config --cflags {{ dep.name }})
LIBS += $(shell pkg-config --libs {{ dep.name }})
{% endif %}
{% endfor %}
{% endif %}

# Default target
all: static shared

# Static library
static: $(STATIC_LIB)

$(STATIC_LIB): $(OBJECTS)
	ar rcs $@ $^

# Shared library
shared: $(SHARED_LIB)

$(SHARED_LIB): $(OBJECTS)
{% if config.language.lower() == 'c' %}
	$(CC) -shared -o $@ $^ $(LIBS)
{% else %}
	$(CXX) -shared -o $@ $^ $(LIBS)
{% endif %}

# Object files
$(OBJDIR)/%.o: $(SRCDIR)/%.{% if config.language.lower() == 'c' %}c{% else %}cpp{% endif %} $(HEADERS)
{% if config.language.lower() == 'c' %}
	$(CC) $(CFLAGS) $(INCLUDES) -fPIC -c $< -o $@
{% else %}
	$(CXX) $(CXXFLAGS) $(INCLUDES) -fPIC -c $< -o $@
{% endif %}

{% if config.generate_tests %}
# Tests
TEST_SOURCES = $(wildcard $(TESTDIR)/*.{% if config.language.lower() == 'c' %}c{% else %}cpp{% endif %})
TEST_OBJECTS = $(TEST_SOURCES:$(TESTDIR)/%.{% if config.language.lower() == 'c' %}c{% else %}cpp{% endif %}=$(OBJDIR)/test_%.o)
TEST_BINARIES = $(TEST_SOURCES:$(TESTDIR)/%.{% if config.language.lower() == 'c' %}c{% else %}cpp{% endif %}=$(BINDIR)/%)

tests: $(TEST_BINARIES)

$(BINDIR)/%: $(OBJDIR)/test_%.o $(STATIC_LIB)
{% if config.language.lower() == 'c' %}
	$(CC) $(CFLAGS) $< -o $@ $(LDFLAGS) $(LIBS)
{% else %}
	$(CXX) $(CXXFLAGS) $< -o $@ $(LDFLAGS) $(LIBS)
{% endif %}

$(OBJDIR)/test_%.o: $(TESTDIR)/%.{% if config.language.lower() == 'c' %}c{% else %}cpp{% endif %} $(HEADERS)
{% if config.language.lower() == 'c' %}
	$(CC) $(CFLAGS) $(INCLUDES) -I$(TESTDIR) -c $< -o $@
{% else %}
	$(CXX) $(CXXFLAGS) $(INCLUDES) -I$(TESTDIR) -c $< -o $@
{% endif %}

# Run tests
check: tests
	@for test in $(TEST_BINARIES); do \
		echo "Running $$test..."; \
		$$test || exit 1; \
	done
	@echo "All tests passed!"
{% endif %}

# Installation
PREFIX ?= /usr/local
INSTALL_LIBDIR = $(PREFIX)/lib
INSTALL_INCDIR = $(PREFIX)/include

install: static shared
	mkdir -p $(INSTALL_LIBDIR) $(INSTALL_INCDIR)
	cp $(STATIC_LIB) $(SHARED_LIB) $(INSTALL_LIBDIR)/
	cp -r $(INCDIR)/$(PROJECT) $(INSTALL_INCDIR)/
	ldconfig

uninstall:
	rm -f $(INSTALL_LIBDIR)/lib$(PROJECT).*
	rm -rf $(INSTALL_INCDIR)/$(PROJECT)
	ldconfig

# Cleaning
clean:
	rm -rf $(OBJDIR) $(LIBDIR) $(BINDIR)

distclean: clean
	rm -rf build/ dist/

# Help
help:
	@echo "Available targets:"
	@echo "  all        - Build static and shared libraries (default)"
	@echo "  static     - Build static library"
	@echo "  shared     - Build shared library"
{% if config.generate_tests %}
	@echo "  tests      - Build test executables"
	@echo "  check      - Build and run tests"
{% endif %}
	@echo "  install    - Install libraries and headers"
	@echo "  uninstall  - Remove installed files"
	@echo "  clean      - Remove build artifacts"
	@echo "  distclean  - Remove all generated files"
	@echo ""
	@echo "Variables:"
	@echo "  DEBUG=1    - Build with debug symbols"
	@echo "  PREFIX     - Installation prefix (default: /usr/local)"

# Phony targets
.PHONY: all static shared tests check install uninstall clean distclean help

# Show configuration
info:
	@echo "Project: $(PROJECT) v$(VERSION)"
	@echo "Language: {% if config.language.lower() == 'c' %}C{% else %}C++{% endif %}"
{% if config.language.lower() == 'c' %}
	@echo "Standard: C{{ config.c_standard[1:] if config.c_standard else '99' }}"
	@echo "Compiler: $(CC)"
	@echo "CFLAGS: $(CFLAGS)"
{% else %}
	@echo "Standard: C++{{ config.cpp_standard[3:] if config.cpp_standard else '17' }}"
	@echo "Compiler: $(CXX)"
	@echo "CXXFLAGS: $(CXXFLAGS)"
{% endif %}
	@echo "Sources: $(words $(SOURCES)) files"
	@echo "Headers: $(words $(HEADERS)) files"
